# default
spring:
  profiles:
    active: local
    # default로 사용할 프로필 선택 (local)

logging:
  level:
    root: INFO  # 기본 로그 레벨은 INFO로 유지
    # org.springframework.batch.item.database: DEBUG
    # com.neodain.springbootbatchdemo.service: DEBUG  # service 패키지의 로그 레벨을 DEBUG로 설정
    # com.neodain.springbootbatchdemo.controller: DEBUG  # controller 패키지의 로그 레벨을 DEBUG로 설정
    com.neodain.springbootbatchdemo.service.impl.DevopsMemberServiceImpl: DEBUG # DevopsMemberServiceImpl 클래스의 로그 레벨을 DEBUG로 설정
    # okhttp3: WARN

# Actuator 설정 : spring boot actuator를 사용하여 애플리케이션의 상태를 모니터링하고 관리할 수 있도록 한다.
# Actuator는 애플리케이션의 상태, 메트릭, 헬스 체크, 환경 정보 등을 제공하는 엔드포인트를 자동으로 생성한다.
# Actuator 엔드포인트는 기본적으로 /actuator 경로로 접근할 수 있다.
# Actuator 엔드포인트를 활성화하려면 spring-boot-starter-actuator 의존성을 추가해야 한다.
# Actuator 엔드포인트를 통해 애플리케이션의 헬스 체크, 메트릭, 환경 정보 등을 확인할 수 있다.
# 헬스 체크 엔드포인트를 통해 애플리케이션의 상태를 확인할 수 있다.
# curl http://localhost:8080/actuator/health
# curl http://localhost:8080/actuator/info
# liveness 엔드포인트를 통해 애플리케이션이 살아있는지 확인할 수 있다.
# liveness 엔드포인트는 애플리케이션이 정상적으로 동작하고 있는지 확인하는 데 사용된다.
# curl http://localhost:8080/actuator/health/liveness
# 응답 예시:
# { "status": "UP", "details": { "livenessState": "ALIVE" } }
# readiness 엔드포인트를 통해 애플리케이션이 준비 상태인지 확인할 수 있다.
# readiness 엔드포인트는 애플리케이션이 요청을 처리할 준비가 되었는지 확인하는 데 사용된다.
# curl http://localhost:8080/actuator/health/readiness   
# 응답 예시:
# { "status": "UP", "details": { "readinessState": "READY" } }
# info 엔드포인트를 통해 애플리케이션의 정보(버전, 빌드 시간 등)를 확인할 수 있다.
# curl http://localhost:8080/actuator/info  
# 응답 예시:
# { "app": { "name": "SpringBootBatchDemo", "version": "1.0.0", "description": "Spring Boot Batch Demo Application" } }
# 메트릭 엔드포인트를 통해 애플리케이션의 메트릭(메모리 사용량, CPU 사용량 등)를 확인할 수 있다.
# curl http://localhost:8080/actuator/metrics   
# 응답 예시:
# { "names": [ "jvm.memory.used", "jvm.gc.pause", "jvm.threads.live", "system.cpu.count", "process.uptime" ] }
# 메트릭 엔드포인트를 통해 특정 메트릭의 상세 정보를 확인할 수 있다.
# curl http://localhost:8080/actuator/metrics/jvm.memory.used
# 응답 예시:
# { "name": "jvm.memory.used", "description": "Memory used by the JVM", "baseUnit": "bytes", "measurements": [ { "statistic": "VALUE", "value": 12345678 } ], "availableTags": [ { "tag": "area", "values": [ "heap", "nonheap" ] } ] }

management:
  endpoints:
    web:
      exposure:
        include: '*'  # 모든 엔드포인트를 노출
      base-path: /actuator  # Actuator 엔드포인트의 기본 경로 설정
  endpoint:
    health:
      show-details: always  # 헬스 체크 상세 정보를 항상 표시
    info:
      access: unrestricted  # info 엔드포인트에 대한 접근을 제한하지 않음
      # enabled: true  # Deprecated Property : info 엔드포인트 활성화
  health:
    db:
      enabled: true  # 데이터베이스 헬스 체크 활성화
    diskspace:
      enabled: true  # 디스크 공간 헬스 체크 활성화

---

spring:
  config:
    activate:
      on-profile: local

  cloud:
    task:
      enabled: false  # Spring Cloud Task 기능을 비활성화하여 TransactionManager 충돌 문제를 방지한다.
      # enabled: true  # Spring Cloud Task 기능을 활성화하려면 주석을 제거한다. 

#  batch:
#    job:
#      name: SpringBootBatchDemo

#    jdbc:
#      initialize-schema: always  # 배치 애플리케이션 초기화시에 메타데이터와 관련된 스키마도 같이 초기화 되도록 한다.
#      # spring5.0 이후 @EnableBatchProceesing을 사용하면 위 옵션을 막아 생성이 안된다.
#      platform: mariadb

  # datasource_h2:
  h2:
    console:
      enabled: true       # H2 콘솔을 활성화하여 웹 브라우저에서 H2 데이터베이스를 확인할 수 있도록 한다.
      path: /h2-console   # H2 콘솔의 경로를 설정한다. 기본값은 /h2-console 이다. (http://localhost:8080/h2-console)

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password:

  jpa:
    show-sql: true  # Hibernate가 생성하는 SQL을 로그에 출력하도록 설정한다. false로 설정하면 SQL 로그가 출력되지 않는다.
    hibernate:
      ddl-auto: create-drop   # ddl-auto: create-drop # 개발 환경에서만 사용, 프로덕션 환경에서는 사용하지 않는다.
                              # create-drop: 애플리케이션 시작 시 데이터베이스를 생성하고, 종료 시 삭제한다.

  datasource_mysql:
    driver-class-name: com.mysql.cj.jdbc.Driver
    # url: jdbc:mysql://localhost:3306/spring_batch_demo?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=Asia/Seoul
    url: jdbc:mysql://localhost:3307/demo
    username: neodain
    password: Kht72@eye1 

  datasource_maraidb:
    driver-class-name: org.mariadb.jdbc.Driver
    url: jdbc:mariadb://localhost:3308/demo
    username: neodain
    password: Kht72@eye1 # single datasource 가 아닌 여러개의 datasource를 사용할 경우, 별도의 configuration 파일에서 datasource의 사용을 설정한다면 {{MARIADB_PASSWORD}}로 설정 가능하다.
    # password: {{MARIADB_PASSWORD}} // application.yml에서 설정 할 경우, {{MARIADB_PASSWORD}}로 설정 : single datasource
  # jpa:
  #   hibernate:
  #     ddl-auto: create-drop 
  #   show-sql: true
  #   properties:
  #     hibernate:
  #       dialect: org.hibernate.dialect.MySQLDialect

influx:
  url: http://localhost:8087
  username: neodain
  password: {{INFLUXDB_PASSWORD}}
  org: neodain 
  bucket: neodain-bucket 
  logLevel: BODY
  readTimeout: 5s
  writeTimeout: 5s
  connectTimeout: 5s

