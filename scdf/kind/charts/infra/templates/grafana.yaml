{{- if .Values.grafana.enabled }}
{{- $name := include "batch-infra.grafana.name" . -}}
{{/* === 1) annotations 맵을 먼저 조립 (global + local + checksum) === */}}
{{- $ann := dict -}}
{{- $ann = merge $ann (default (dict) .Values.global.podAnnotations) -}}
{{- $ann = merge $ann (default (dict) .Values.grafana.podAnnotations) -}}
{{- if and .Values.grafana.datasources (hasKey .Values.grafana.datasources "datasources.yaml") }}
{{- $_  := set $ann "checksum/datasources"         (include "batch-infra.grafana.datasources" .        | toJson | sha256sum) -}}
{{- end }}
{{- if and .Values.grafana.dashboardsProvider (hasKey .Values.grafana.dashboardsProvider "dashboards.yaml") }}
{{- $_  := set $ann "checksum/dashboards-provider" (include "batch-infra.grafana.dashboardsProvider" . | toJson | sha256sum) -}}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  labels: 
    {{ include "batch-infra.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.grafana.replicaCount | default 1 }}
  selector:
    matchLabels:
      {{ include "batch-infra.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/name: {{ $name }}
  template:
    metadata:
      labels:
        {{ include "batch-infra.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/name: {{ $name }}
      {{- if gt (len $ann) 0 }}
      annotations:
        {{ toYaml $ann | nindent 8 }}
      {{- end }} 
    spec:
      {{- include "batch-infra.imagePullSecrets" . | nindent 6 }}
      {{- with .Values.grafana.nodeSelector }}
      nodeSelector: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.grafana.affinity }}
      affinity: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.grafana.tolerations }}
      tolerations: 
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: grafana
          image: {{ include "batch-infra.image" (dict "root" . "repo" .Values.grafana.image.repository "tag" .Values.grafana.image.tag) }}
          imagePullPolicy: {{ include "batch-infra.imagePullPolicy" .Values.grafana.image.pullPolicy }}
          env:
            {{- if .Values.grafana.admin.existingSecret }}
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef: 
                  name: {{ .Values.grafana.admin.existingSecret }}
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom: 
                secretKeyRef: 
                  name: {{ .Values.grafana.admin.existingSecret }}
                  key: admin-password
            {{- else }}
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.grafana.admin.user | default "admin" | quote }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.grafana.admin.password | default "admin" | quote }}
            {{- end }}
            - name: INFLUX_TOKEN      
              valueFrom: 
                secretKeyRef: 
                  name: influxdb-auth
                  key: token
          ports: [ { name: http, containerPort: {{ .Values.grafana.service.port | default 3000 }} } ]
          livenessProbe:  { httpGet: { path: /api/health, port: http }, initialDelaySeconds: 30, periodSeconds: 10 }
          readinessProbe: { httpGet: { path: /api/health, port: http }, initialDelaySeconds: 10, periodSeconds: 5 }
          resources:
            {{- toYaml (.Values.grafana.resources | default (dict "requests" (dict "cpu" "100m" "memory" "256Mi") "limits" (dict "cpu" "500m" "memory" "1024Mi"))) | nindent 12 }}
          volumeMounts:
            - { name: data, mountPath: {{ .Values.grafana.persistence.mountPath | default "/var/lib/grafana" }} }
            {{- if .Values.grafana.datasources }}
            - { name: datasources, mountPath: /etc/grafana/provisioning/datasources }
            {{- end }}
            {{- if .Values.grafana.dashboardsProvider.enabled }}
            - { name: dashboards-provider, mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml, subPath: dashboards.yaml }
            - { name: dashboards, mountPath: /var/lib/grafana/dashboards }
            {{- end }}
      volumes:
        - name: data
          {{- if .Values.grafana.persistence.enabled }}
          persistentVolumeClaim: { claimName: {{ include "batch-infra.grafana.pvcName" . }} }
          {{- else }} emptyDir: {} {{- end }}
        {{- if .Values.grafana.datasources }}
        - name: datasources
          configMap: { name: {{ include "batch-infra.grafana.datasources.configName" . }} }
        {{- end }}
        {{- if .Values.grafana.dashboardsProvider.enabled }}
        - name: dashboards-provider
          configMap: { name: {{ printf "%s-dashboards-provider" $name }} }
        - name: dashboards
          projected:
            sources:
            {{- range $cm := .Values.grafana.dashboardsProvider.configMaps }}
              - configMap: { name: {{ $cm }} }
            {{- end }}
        {{- end }}
---

# --- Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}
  labels: 
    {{- include "batch-infra.labels" . | nindent 4 }}
spec:
  type: {{ .Values.grafana.service.type | default "ClusterIP" }}
  selector:
    {{- include "batch-infra.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/name: {{ $name }}
  ports:
    - name: http
      port: {{ .Values.grafana.service.port | default 3000 }}
      targetPort: http
      {{- if eq (.Values.grafana.service.type | default "ClusterIP") "NodePort" }}
      nodePort: {{ .Values.grafana.service.nodePort | default 31000 }}
      {{- end }}

{{- if .Values.grafana.datasources }}
---

# --- Grafana Datasources (ConfigMap)
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "batch-infra.grafana.datasources.configName" . }}
  labels: 
    {{- include "batch-infra.labels" . | nindent 4 }}
data:
  datasources.yaml: |
{{ toYaml (index .Values.grafana.datasources "datasources.yaml") | indent 4 }}
{{- end }}

{{- if .Values.grafana.dashboardsProvider.enabled }}
---

# --- Grafana Dashboards Provider (ConfigMap)
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "%s-dashboards-provider" $name }}
  labels: 
    {{- include "batch-infra.labels" . | nindent 4 }}
data:
  dashboards.yaml: |
{{ include "batch-infra.grafana.dashboardsProvider" . | nindent 4 }}
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        type: file
        disableDeletion: false
        editable: true
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

{{- end }}

{{- if .Values.grafana.persistence.enabled }}
---

# --- Grafana PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "batch-infra.grafana.pvcName" . }}
  labels: 
    {{- include "batch-infra.labels" . | nindent 4 }}
spec:
  accessModes: ["ReadWriteOnce"]
  storageClassName: {{ .Values.grafana.persistence.storageClass | default "standard" }}
  resources: { requests: { storage: {{ .Values.grafana.persistence.size | default "1Gi" }} } }
{{- end }}
{{- end }}
