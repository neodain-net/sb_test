{{- $root := . -}}
{{- range .Values.batchJobs.jobs }}
{{- if eq .mode "cron" }}
{{- $kver := $root.Capabilities.KubeVersion.Version -}}
{{- $envcm := printf "%s-env" (include "batch-job.resname" (dict "root" $root "name" .name)) -}}
{{- $envcm_exists := (or (and (hasKey . "datasource") .datasource)
                         (and (hasKey . "datasource_sub") .datasource_sub)
                         (hasKey . "influx")) -}}

apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "batch-job.resname" (dict "root" $root "name" (printf "%s-cron" .name)) }}
  labels:
    {{- include "batch-job.labels" $root | nindent 4 }}
    app.kubernetes.io/component: {{ .name }}
spec:
  schedule: {{ .cron.schedule | quote }}
  {{- if and .cron.timeZone (semverCompare ">=1.27-0" $kver) }}
  timeZone: {{ .cron.timeZone | quote }}
  {{- end }}
  concurrencyPolicy: {{ .cron.concurrencyPolicy | default "Forbid" }}
  suspend: {{ .cron.suspend | default false }}
  {{- if .cron.startingDeadlineSeconds }}
  startingDeadlineSeconds: {{ .cron.startingDeadlineSeconds }}
  {{- end }}
  successfulJobsHistoryLimit: {{ .cron.successfulJobsHistoryLimit | default 3 }}
  failedJobsHistoryLimit:     {{ .cron.failedJobsHistoryLimit     | default 1 }}
  jobTemplate:
    spec:
      parallelism: {{ .job.parallelism   | default 1 }}
      completions: {{ .job.completions   | default 1 }}
      backoffLimit: {{ .job.backoffLimit | default 0 }}
      {{- if .job.activeDeadlineSeconds }}
      activeDeadlineSeconds: {{ .job.activeDeadlineSeconds }}
      {{- end }}
      ttlSecondsAfterFinished: {{ .job.ttlSecondsAfterFinished | default 3600 }}
      template:
        metadata:
          labels:
            {{- include "batch-job.selectorLabels" $root | nindent 12 }}
            app.kubernetes.io/component: {{ .name }}
          {{ $anns := dict }}
          {{- with .podAnnotations }}{{- $_ := merge $anns . -}}{{- end }}
          {{- $_ := set $anns "checksum/config-env"  (include (print $.Template.BasePath "/configmap-env.yaml")  $root | sha256sum) -}}
          {{- $_ := set $anns "checksum/config-file" (include (print $.Template.BasePath "/configmap-file.yaml") $root | sha256sum) -}}
          {{- $_ := set $anns "checksum/secret" (include (print $.Template.BasePath "/secret-env.yaml") $root | sha256sum) -}}
          annotations:
            {{- toYaml $anns | nindent 12 }}
        spec:
          restartPolicy: Never
          {{- with .serviceAccountName }}
          serviceAccountName: {{ . }}
          {{- end }}
          containers:
            - name: {{ .name }}
              image: "{{ .image.repository }}:{{ .image.tag }}"
              imagePullPolicy: {{ .image.pullPolicy | default "IfNotPresent" }}
              {{- with .command }}
              command: {{ toJson . }}
              {{- end }}
              {{- with .args }}
              args: {{ toJson . }}
              {{- end }}
              envFrom:
                {{- if $envcm_exists }}
                - configMapRef:
                    name: {{ $envcm }}
                {{- end }}
                - secretRef:
                    name: {{ include "batch-job.resname" (dict "root" $root "name" .name) }}-secret
                    optional: true
              resources:
                requests:
                  cpu:    {{ .resources.requests.cpu    | default "100m"  | quote }}
                  memory: {{ .resources.requests.memory | default "128Mi" | quote }}
                limits:
                  cpu:    {{ .resources.limits.cpu      | default "500m"  | quote }}
                  memory: {{ .resources.limits.memory   | default "512Mi" | quote }}
              {{- if and .configMap .configMap.enabled .configMap.files }}
              env:
                - name: SPRING_MAIN_WEB_APPLICATION_TYPE
                  value: "none"
                - name: JAVA_TOOL_OPTIONS
                  value: "-XX:+ExitOnOutOfMemoryError -XX:MaxRAMPercentage=75.0"
                - name: SPRING_CONFIG_ADDITIONAL_LOCATION
                  value: "/config/"
              volumeMounts:
                - name: config-volume
                  mountPath: /config
                  readOnly: true
              {{- else }}
              {{- with .env }}
              env:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              {{- with .volumeMounts }}
              volumeMounts:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              {{- end }}
          {{- if and .configMap .configMap.enabled .configMap.files }}
          volumes:
            - name: config-volume
              configMap:
                name: {{ .configMap.name | default (printf "%s-config" (include "batch-job.resname" (dict "root" $root "name" .name))) }}
          {{- else }}
          {{- with .volumes }}
          volumes:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if and .volumeMounts (not .volumes) }}
            {{- fail (printf "volumeMounts provided for %q but no matching 'volumes' defined (and no file-based ConfigMap in use)" .name) -}}
          {{- end }}
          {{- end }}
          {{- with .nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
---
{{- end }}
{{- end }}