{{- $root := . -}}
{{- range .Values.batchTasks.tasks }}
{{- if eq .mode "task" }}
{{- $envcm := printf "%s-env" (include "batch-task.resname" (dict "root" $root "name" .name)) -}}
{{- $envcm_exists := (or (and (hasKey . "datasource") .datasource)
                         (and (hasKey . "datasource_sub") .datasource_sub)
                         (hasKey . "influx")) -}}
apiVersion: batch/v1
kind: Job 
metadata:
  name: {{ include "batch-task.resname" (dict "root" $root "name" .name) }}
  labels:
    {{- include "batch-task.labels" $root | nindent 4 }}
    app.kubernetes.io/component: {{ .name }}
spec:
  parallelism: {{ .task.parallelism   | default 1 }}
  completions: {{ .task.completions   | default 1 }}
  backoffLimit: {{ .task.backoffLimit | default 0 }}
  {{- if .task.activeDeadlineSeconds }}
  activeDeadlineSeconds: {{ .task.activeDeadlineSeconds }}
  {{- end }}
  ttlSecondsAfterFinished: {{ .task.ttlSecondsAfterFinished | default 3600 }}
  template:
    metadata:
      labels:
        {{- include "batch-task.selectorLabels" $root | nindent 8 }}
        app.kubernetes.io/component: {{ .name }}
      {{ $anns := dict }}
      {{- with .podAnnotations }}{{- $_ := merge $anns . -}}{{- end }}
      {{- $_ := set $anns "checksum/config-env"  (include (print $.Template.BasePath "/configmap-env.yaml")  $root | sha256sum) -}}
      {{- $_ := set $anns "checksum/config-file" (include (print $.Template.BasePath "/configmap-file.yaml") $root | sha256sum) -}}
      {{- $_ := set $anns "checksum/secret" (include (print $.Template.BasePath "/secret-env.yaml") $root | sha256sum) -}}
      annotations:
        {{- toYaml $anns | nindent 12 }}
    spec:
      restartPolicy: Never
      {{- with .serviceAccountName }}
      serviceAccountName: {{ . }}
      {{- end }}
      containers:
        - name: {{ .name }}
          image: "{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ .image.pullPolicy | default "IfNotPresent" }}
          {{- with .command }}
          command: {{ toJson . }}
          {{- end }}
          {{- with .args }}
          args:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          envFrom:
            {{- if $envcm_exists }}
            - configMapRef:
                name: {{ $envcm }}
            {{- end }}

            {{- if and .datasource .datasource.secretName }}
            - secretRef:
                name: {{ .datasource.secretName }}  
            {{- else }}
            - secretRef:
                name: {{ include "batch-task.resname" (dict "root" $ "name" .name) }}-secret  # ← 우리가 만든 통합 Secret
            {{- end }}

            {{- if and .datasource_sub .datasource_sub.enabled .datasource_sub.secretName }}
            - secretRef:
                name: {{ .datasource_sub.secretName }}
            {{- end }}

            {{- if and .influx .influx.existingSecret }}
            - secretRef:
                name: {{ .influx.existingSecret }}  
            {{- end }}

          {{- if and .configMap .configMap.enabled .configMap.files }}
          {{- with .env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config-volume
              mountPath: /config
              readOnly: true
          {{- else }}
          {{- with .env }}
          env:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          resources:
            requests:
              cpu:    {{ .resources.requests.cpu    | default "200m"  | quote }}
              memory: {{ .resources.requests.memory | default "256Mi" | quote }}
            limits:
              cpu:    {{ .resources.limits.cpu      | default "500m"  | quote }}
              memory: {{ .resources.limits.memory   | default "512Mi" | quote }}
      {{- if and .configMap .configMap.enabled .configMap.files }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ .configMap.name | default (printf "%s-config" (include "batch-task.resname" (dict "root" $root "name" .name))) }}
      {{- else }}
      {{- with .volumes }}   
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if and .volumeMounts (not .volumes) }}
        {{- fail (printf "volumeMounts provided for %q but no matching 'volumes' defined (and no file-based ConfigMap in use)" .name) -}}
      {{- end }}
      {{- end }}
      {{- with .nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
{{- end }}
{{- end }}